plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.72'
}

version = "3.9.0"
group = "dev.gigaherz.guidebook"

Provider<String> minecraftVersion(Transformer<String, String> mapper) {
    return project.userDevRuntime.runtimes.map(r -> r.values().first().specification.minecraftVersion).map(mapper)
}

base {
    archivesName = minecraftVersion { "Guidebook-${it}" }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven {
        url 'https://dogforce-games.com/maven'
    }
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // game stages
        url 'https://maven.blamejared.com'
    }
    mavenLocal()
}

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', '' // 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        //ideaModule "${project.name}.main"

        workingDirectory project.file('run')

        //programArguments.addAll "--mixin=jsonthings.mixins.json"

        modSource project.sourceSets.main
    }

    client {
    }

    server {
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

dependencies {
    implementation 'net.neoforged:neoforge:20.4.60-beta'

    //compileOnly ("mezz.jei:jei-1.20-common-api:14.0.0.4")
    //runtimeOnly fg.deobf("mezz.jei:jei-1.20-common:14.0.0.4")
    //compileOnly ("mezz.jei:jei-1.20-forge-api:14.0.0.4")
    //runtimeOnly fg.deobf("mezz.jei:jei-1.20-forge:14.0.0.4")

    /*
    compileOnly fg.deobf( "net.darkhax.gamestages:GameStages-Forge-1.19.2:11.0.2")
    compileOnly fg.deobf( "net.darkhax.bookshelf:Bookshelf-Forge-1.19.2:16.1.4")
     */
}

jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title": "guidebook",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": archiveVersion,
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}"
        ])
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

project.afterEvaluate {
    publish.dependsOn('build')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId project.archivesBaseName
                from components.java
            }
        }

        repositories {
            if (findProperty("RELEASE") && System.env.giga_maven_host != null) {
                System.out.println("Remote publish enabled on " + System.env.giga_maven_host)
                maven {
                    url System.env.giga_maven_host
                    credentials {
                        username System.env.giga_maven_user
                        password System.env.giga_maven_password
                    }
                }
            }
            else {
                System.out.println("Remote publish disabled.")
                maven {
                    url "$projectDir/../CommonMaven"
                }
            }
        }
    }
}